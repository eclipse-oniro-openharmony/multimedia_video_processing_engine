# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/ohos/config.gni")
import("//build/ohos.gni")
import("//build/config/components/idl_tool/idl.gni")
import("//foundation/multimedia/video_processing_engine/config.gni")

group("video_processing_service_group") {
  deps = [
    ":videoprocessingservice",
    ":videoprocessingserviceimpl",
    "sa_profile:video_processing_service",
    "sa_profile:video_processing_service_etc"
  ]
}

idl_interface_sources = [
  "${target_gen_dir}/video_processing_service_manager_proxy.cpp",
  "${target_gen_dir}/video_processing_service_manager_stub.cpp",
]

idl_gen_interface("videoprocessingservice_interface") {
    src_idl = rebase_path("IVideoProcessingServiceManager.idl")
    dst_file = string_join(",", idl_interface_sources)
    log_domainid = "0x00010256"
    log_tag = "VideoProcessingService"
}

config("videoprocessingservice_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "${target_gen_dir}",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

config("videoprocessingservice_export_config") {
  include_dirs = [
    "$ALGORITHM_COMMON_DIR/include",
    "$ALGORITHM_EXTENSION_MANAGER_DIR/include",
    "$DFX_DIR/include",
    "$INTERFACES_INNER_API_DIR",
    "$SERVICES_DIR/algorithm/include/",
    "$SERVICES_DIR/utils/include/",
    "${target_gen_dir}",
  ]
}

ohos_shared_library("videoprocessingserviceimpl") {
  install_enable = true

  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    integer_overflow = true
    ubsan = true
    debug = false
  }

  configs = [ ":videoprocessingservice_config" ]
  public_configs = [ ":videoprocessingservice_export_config" ]

  sources = [
    # common for VPE
    "$ALGORITHM_COMMON_DIR/vpe_utils_common.cpp",
    "$DFX_DIR/vpe_trace.cpp",
    # Only for service
    "algorithm/video_processing_algorithm_base.cpp",
    "algorithm/video_processing_algorithm_factory.cpp",
    "algorithm/video_processing_algorithm_without_data.cpp",
    "utils/configuration_helper.cpp",
    "utils/surface_buffer_info.cpp",
    "utils/vpe_sa_utils.cpp",
  ]
  defines = [ "AMS_LOG_TAG = \"VideoProcessingService\"" ]

  include_dirs = [
    "include",
    "${target_gen_dir}",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:2d_graphics",
    "graphic_surface:surface",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "image_framework:pixelmap",
    "libxml2:libxml2",
    "media_foundation:media_foundation",
  ]
  subsystem_name = "multimedia"
  part_name = "video_processing_engine"
}

ohos_shared_library("videoprocessingservice") {
  install_enable = true

  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    integer_overflow = true
    ubsan = true
    debug = false
  }

  shlib_type = "sa"

  configs = [ ":videoprocessingservice_config" ]
  public_configs = [ ":videoprocessingservice_export_config" ]

  output_values = get_target_outputs(":videoprocessingservice_interface")
  sources = [
    "src/video_processing_server.cpp",
  ]
  sources += filter_include(output_values, [ "*.cpp" ])
  defines = [ "AMS_LOG_TAG = \"VideoProcessingService\"" ]

  include_dirs = [
    "include",
    "${target_gen_dir}"
  ]

  deps = [
    ":videoprocessingservice_interface",
    ":videoprocessingserviceimpl",
  ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_2d:2d_graphics",
    "graphic_surface:surface",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "image_framework:pixelmap",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  subsystem_name = "multimedia"
  part_name = "video_processing_engine"
}
